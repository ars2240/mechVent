from fcmab import *
from fnn import *
from floaders import *
from itertools import chain

configs = {'allgood': {'models': ['FLRSH'], 'data': 'RandPert', 'adv': 15},
           'mab': {'models': ['FLRSH'], 'data': 'RandPert', 'adv': 15},
           'mad': {'models': ['FLRHZ'], 'data': 'RandPert', 'adv': 15}}

for cfg in configs.keys():
    for sh in [1, 81, 181, 261, 341]:
        head = 'IBMU4_Sh' + str(sh)
        if sh == 1:
            c = [[271, 287, 305, 330, 65, 264, 41, 197, 116, 4, 85, 261, 17, 141, 56, 227, 44],
                 [217, 233, 269, 270, 67, 219, 304, 218, 139, 294, 297, 31, 74, 59, 57, 320, 167],
                 [192, 201, 202, 212, *range(335, 340), 13, 25, 35, 134, 135, 136, 137, 138, 2, 71, 189, 7],
                 [149, 165, 169, 176, 38, 86, 107, 121, 129, 130, 131, 132, 133, 168, 238, 146, 318],
                 [142, 143, 144, 147, 170, 172, 174, 204, 100, 125, 126, 127, 128, 265, 148, 150, 151],
                 [115, 118, 119, 124, 206, 207, 210, 211, 284, 333, 256, 290, 98, 166, 244, 10, 242],
                 [72, 104, 110, 111, 214, 215, 216, 224, 161, 162, 163, 203, 205, 308, 28, 303, 230],
                 [34, 49, 50, 51, 331, 19, 73, 80, 156, 157, 158, 159, 160, 194, 268, 5, 63],
                 [281, 300, 311, 322, 96, 101, 178, 293, 122, 152, 153, 154, 155, 79, 257, 62, 250],
                 [145, 232, 235, 272, 36, 231, 306, 307, 199, 200, 21, 33, 120, 285, 48, 245, 263],
                 [61, 83, 89, 113, 309, 9, 55, 66, 182, 183, 184, 195, 198, 84, 299, 302, 103],
                 [312, 1, 12, 30, 191, 226, 228, 273, 90, 164, 177, 180, 181, 20, 39, 278, 29],
                 [175, 188, 209, 220, 298, 6, 82, 92, 43, 326, 280, 97, 0, 60, 254, 251, 23],
                 [327, 52, 171, 173, 225, 319, 40, 47, 88, 112, 258, 314, 332, 53, 255, 296, 282],
                 [213, 247, 317, 325, 75, 77, 78, 117, 275, 313, 292, 3, 76, 8, 241, 277, 24],
                 [108, 109, 179, 185, 248, 267, 123, 208, 187, 222, 236, 26, 37, 27, 243, 234, 276],
                 [11, 64, 81, 94, 239, 295, 321, 329, 323, 87, 246, 14, 186, 283, 105, 229, 316],
                 [58, 259, 310, 315, 334, *range(340, 345), 70, 102, 95, 252, 42, 240, 106, 93, 140, 262, 260],
                 [324, *range(352, 358), 45, 46, 289, 291, 328, *range(345, 348), 221, 193, 16, 274, 22, 279, 54, 253, 18],
                 [99, 114, 196, 286, *range(358, 363), *range(348, 352), 32, 69, 190, 15, 223, 249, 91, 237, 288, 301, 68]]
        elif sh == 81:
            c = [[271, 287, 305, 330, 65, 264, 41, 197, 116, 4, 85, 261, 17],
                 [217, 233, 269, 270, 67, 219, 304, 218, 139, 294, 297, 31, 74],
                 [192, 201, 202, 212, *range(335, 340), 13, 25, 35, 134, 135, 136, 137, 138],
                 [149, 165, 169, 176, 38, 86, 107, 121, 129, 130, 131, 132, 133],
                 [142, 143, 144, 147, 170, 172, 174, 204, 100, 125, 126, 127, 128],
                 [115, 118, 119, 124, 206, 207, 210, 211, 284, 333, 256, 290, 98],
                 [72, 104, 110, 111, 214, 215, 216, 224, 161, 162, 163, 203, 205],
                 [34, 49, 50, 51, 331, 19, 73, 80, 156, 157, 158, 159, 160],
                 [281, 300, 311, 322, 96, 101, 178, 293, 122, 152, 153, 154, 155],
                 [145, 232, 235, 272, 36, 231, 306, 307, 199, 200, 21, 33, 120],
                 [61, 83, 89, 113, 309, 9, 55, 66, 182, 183, 184, 195, 198],
                 [312, 1, 12, 30, 191, 226, 228, 273, 90, 164, 177, 180, 181],
                 [175, 188, 209, 220, 298, 6, 82, 92, 43, 326, 280, 97, 0],
                 [327, 52, 171, 173, 225, 319, 40, 47, 88, 112, 258, 314, 332],
                 [213, 247, 317, 325, 75, 77, 78, 117, 275, 313, 292, 3, 76],
                 [108, 109, 179, 185, 248, 267, 123, 208, 187, 222, 236, 26, 37],
                 [11, 64, 81, 94, 239, 295, 321, 329, 323, 87, 246, 14, 186],
                 [58, 259, 310, 315, 334, *range(340, 345), 70, 102, 95, 252, 42, 240, 106],
                 [324, *range(352, 358), 45, 46, 289, 291, 328, *range(345, 348), 221, 193, 16, 274, 22],
                 [99, 114, 196, 286, *range(358, 363), *range(348, 352), 32, 69, 190, 15, 223, 249, 91]]
        elif sh == 181:
            c = [[271, 287, 305, 330, 65, 264, 41, 197], [217, 233, 269, 270, 67, 219, 304, 218],
                 [192, 201, 202, 212, *range(335, 340), 13, 25, 35], [149, 165, 169, 176, 38, 86, 107, 121],
                 [142, 143, 144, 147, 170, 172, 174, 204], [115, 118, 119, 124, 206, 207, 210, 211],
                 [72, 104, 110, 111, 214, 215, 216, 224], [34, 49, 50, 51, 331, 19, 73, 80],
                 [281, 300, 311, 322, 96, 101, 178, 293], [145, 232, 235, 272, 36, 231, 306, 307],
                 [61, 83, 89, 113, 309, 9, 55, 66], [312, 1, 12, 30, 191, 226, 228, 273],
                 [175, 188, 209, 220, 298, 6, 82, 92], [327, 52, 171, 173, 225, 319, 40, 47],
                 [213, 247, 317, 325, 75, 77, 78, 117], [108, 109, 179, 185, 248, 267, 123, 208],
                 [11, 64, 81, 94, 239, 295, 321, 329], [58, 259, 310, 315, 334, *range(340, 345), 70, 102],
                 [324, *range(352, 358), 45, 46, 289, 291, 328, *range(345, 348)],
                 [99, 114, 196, 286, *range(358, 363), *range(348, 352), 32, 69]]
        elif sh == 261:
            c = [[271, 287, 305, 330], [217, 233, 269, 270], [192, 201, 202, 212], [149, 165, 169, 176],
                 [142, 143, 144, 147], [115, 118, 119, 124], [72, 104, 110, 111], [34, 49, 50, 51], [281, 300, 311, 322],
                 [145, 232, 235, 272], [61, 83, 89, 113], [312, 1, 12, 30], [175, 188, 209, 220], [327, 52, 171, 173],
                 [213, 247, 317, 325], [108, 109, 179, 185], [11, 64, 81, 94], [58, 259, 310, 315],
                 [324, *range(352, 358), 45, 46], [99, 114, 196, 286]]
        elif sh == 341:
            c = [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []]
        else:
            raise Exception('Number of shared features not implemented.')
        shared = [x for x in range(0, 363) if x not in chain(*c)]
        adv = {i: [*range(len(c[i]), len(c[i]) + len(shared))] for i in range(configs[cfg]['adv'])}
        for i in range(len(c)):
            c[i].sort()
            c[i].extend(shared)

        nf = int(sh + (341 - sh) / 20)
        if configs[cfg]['data'] == 'RandPert':
            tr_loader, val_loader, te_loader = ibm_loader(batch_size=128, c=c, adv=adv, adv_valid=True, undersample=4)
        elif configs[cfg]['models'] == 'AdvHztl':
            tr_loader, val_loader, te_loader = adv_loader(batch_size=128, c=c, adv=adv, head='IBMU410c3a_Sh' + str(sh),
                                                          compress=True)
        else:
            raise Exception('Data source not implemented.')

        for m in configs[cfg]['models']:
            head2 = head + '_' + m
            if m == 'FLRSH':
                model = FLRSH(feats=c, nc=20, classes=2)
            elif m == 'FLNSH':
                model = FLNSH(feats=c, nc=20, classes=2)
            elif m == 'FLRHZ':
                model = FLRHZ(feats=c, nf=[sh, nf-sh], nc=20, classes=2)
            else:
                raise Exception('Model not found.')
            opt = torch.optim.Adam(model.parameters(), weight_decay=.01)
            loss = nn.CrossEntropyLoss()

            if cfg == 'allgood':
                tail = '20c{0}a_allgood_{1}_Reset'.format(configs[cfg]['adv'], configs[cfg]['data'])
                cmab = fcmab(model, loss, opt, nc=20, n=100, c='allgood', head=head2 + tail,
                             adv_c=[*range(configs[cfg]['adv'])], fix_reset=True)
            elif cfg == 'mab':
                tail = '20c{0}a_{1}_Reset'.format(configs[cfg]['adv'], configs[cfg]['data'])
                cmab = fcmab(model, loss, opt, nc=20, n=100, c='mablin', head=head2 + tail,
                             adv_c=[*range(configs[cfg]['adv'])], fix_reset=True)
            elif cfg == 'mad':
                tail = '20c{0}a_{1}_Asynch1_MAD2'.format(configs[cfg]['adv'], configs[cfg]['data'])
                cmab = fcmab(model, loss, opt, nc=20, n=100, c='mad', head=head2 + tail,
                             adv_c=[*range(configs[cfg]['adv'])], sync=False, ucb_c=2)
            else:
                raise Exception('Config not implemented.')
            cmab.train(tr_loader, val_loader, te_loader)
